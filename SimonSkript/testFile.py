#!/usr/bin/env python3
import json
import argparse


def load_gaze_points(json_path):
    """
    Reads a line-delimited JSON file and extracts all entries
    that have both 'gaze2d' and 'gaze3d'. Returns two lists of tuples.
    """
    img_pts = []
    obj_pts = []
    with open(json_path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            try:
                evt = json.loads(line)
            except json.JSONDecodeError:
                # skip malformed lines
                continue
            data = evt.get("data", {})
            g2 = data.get("gaze2d")
            g3 = data.get("gaze3d")
            if g2 is not None and g3 is not None:
                # assume g2 is [x,y], g3 is [x,y,z]
                img_pts.append((g2[0], g2[1]))
                obj_pts.append((g3[0], g3[1], g3[2]))
    return img_pts, obj_pts


def dump_python_arrays(img_pts, obj_pts, out_py):
    """
    Writes a .py file defining two lists:
      normalized_image_points_data = [...]
      object_points_data = [...]
    """
    with open(out_py, "w", encoding="utf-8") as f:
        f.write("# Auto-generated by extract_gaze_points.py\n\n")
        f.write("normalized_image_points_data = [\n")
        for x, y in img_pts:
            f.write(f"    ({x:.8f}, {y:.8f}),\n")
        f.write("]\n\n")
        f.write("object_points_data = [\n")
        for x, y, z in obj_pts:
            f.write(f"    ({x:.4f}, {y:.4f}, {z:.4f}),\n")
        f.write("]\n")


def main():
    p = argparse.ArgumentParser(
        description="Extract valid 2D/3D gaze points from a JSON log"
    )
    p.add_argument(
        "input_json",
        help="Path to line-delimited input.json (one JSON object per line)",
    )
    p.add_argument(
        "--out_py",
        default="gaze_point_arrays.py",
        help="Where to write the Python file with two arrays",
    )
    args = p.parse_args()

    img_pts, obj_pts = load_gaze_points(args.input_json)
    if not img_pts:
        print("No valid gaze2d/gaze3d pairs found.")
        return

    dump_python_arrays(img_pts, obj_pts, args.out_py)
    print(f"Wrote {len(img_pts)} 2D points and {len(obj_pts)} 3D points to {args.out_py}")


if __name__ == "__main__":
    main()